package BaneOfEvil
import BaneOfEvil_config
import ChannelAbilityPreset
import ClosureEvents
import ClosureForGroups
import Knockback3
import Missile

/** Ability - Mechanics */
class BaneOfEvil
    /** Ability - Generate objects */
    static let abilId = compiletime(ABIL_ID_GEN.next())

    /**	After a unit finishes casting the ability */
    static function fire(unit caster, vec2 target)
        Missile missile = Missile.create(FX_MISSILE, caster.getPos3Fly(), target)
        missile
            ..setSpeed(MISSILE_SPEED)
            ..setTrail(FX_PATH)
            ..onHit() ->
                explode(caster, target)

    /**	After the missile reaches its destination */
    static function explode(unit caster, vec2 target)
        flashEffect(FX_EXPLODE, target)
        forUnitsInRange(target, AREA) u ->
            if u.isAlive() and u.getOwner().isEnemyOf(caster.getOwner())
                flashEffect(FX_KNOCKBACK, u, "origin")
                let knockAngleGround = target.angleTo(u.getPos())
                caster.damageTarget(u, DAMAGE)
                Knockback3.add(u, KNOCK_VELOCITY, knockAngleGround, KNOCK_ANGLE_AIR.fromDeg())

// Trigger when a unit finishes casting the Bane of Evil ability
init
    EventListener.onPointCast(BaneOfEvil.abilId) (caster, target) ->
        BaneOfEvil.fire(caster, target)

/** Ability - Object settings */
@compiletime function generateAbility()
    new ChannelAbilityPreset(BaneOfEvil.abilId, 1, true)
        ..setName(NAME)
        ..setAnimationNames(ANIMATION_NAMES)
        ..presetButtonPosNormal(BUTTON_POSITION_X, BUTTON_POSITION_Y)
        ..presetIcon(ICON)
        ..presetHotkey(HOTKEY_NORMAL)
        ..presetTargetTypes(TARGET_TYPES)
        ..presetCastRange(lvl -> CAST_RANGE)
        ..presetCastingTime(lvl -> CASTING_TIME)
        ..presetCooldown(lvl -> COOLDOWN)
        ..presetManaCost(lvl -> MANA_COST)
        ..presetTooltipNormal(lvl -> TT_NORMAL)
        ..presetTooltipNormalExtended(lvl -> TT_EXTENDED)
